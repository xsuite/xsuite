# This is a test workflow the other (self-hosted runner based) workflows rely on
name: Test workflow (self-hosted)

# Controls when the action will run. This is a reusable workflow.
on:
  workflow_call:
    # Inputs the workflow accepts.
    # Specify branches using the refspec-like syntax: <user>:<branch>
    inputs:
      locations:
        description: 'Branch locations (JSON array string)'
        default: '{
          "xobjects_location":"xsuite:main",
          "xdeps_location":"xsuite:main",
          "xpart_location":"xsuite:main",
          "xtrack_location":"xsuite:main",
          "xfields_location":"xsuite:main",
          "xmask_location":"xsuite:main",
          "xcoll_location":"xsuite:main",
          "xwakes_location":"xsuite:main"
        }'
        required: false
        type: string
      pytest_options:
        description: Additional pytest options
        required: false
        type: string
        default: ''
      test_contexts:
        required: false
        type: string
        default: 'ContextCpu;ContextCpu:auto;ContextCupy;ContextPyopencl'
      platform:
        required: true
        type: string
      suites:
        description: a list of the suites to run as a JSON string
        required: false
        type: string
        default: '["xobjects", "xdeps", "xpart", "xtrack", "xfields", "xcoll", "xwakes"]'

env:
  with_gpu: ${{ contains(inputs.test_contexts, 'Cupy') || contains(inputs.test_contexts, 'Pyopencl') }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# The jobs are all run in independent environments. Here we will run a separate job
# for each of the test suites specified in the matrix below.
jobs:
  build-test-image:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    outputs:
      image_id: ${{ steps.build-image.outputs.image_id }}
    steps:
      - id: checkout-repo
        name: Checkout the repo
        uses: actions/checkout@v3
      - id: build-image
        name: Build the test image
        run: |
          IMAGE="xsuite-test-runner-$(cat /proc/sys/kernel/random/uuid)"
          echo "image_id=$IMAGE" >> $GITHUB_OUTPUT
          docker build \
            --rm \
            --network=host \
            --no-cache=true \
            --build-arg xobjects_branch=${{ fromJson(inputs.locations).xobjects_location }} \
            --build-arg xdeps_branch=${{ fromJson(inputs.locations).xdeps_location }} \
            --build-arg xpart_branch=${{ fromJson(inputs.locations).xpart_location }} \
            --build-arg xtrack_branch=${{ fromJson(inputs.locations).xtrack_location }} \
            --build-arg xfields_branch=${{ fromJson(inputs.locations).xfields_location }} \
            --build-arg xmask_branch=${{ fromJson(inputs.locations).xmask_location }} \
            --build-arg xcoll_branch=${{ fromJson(inputs.locations).xcoll_location }} \
            --build-arg xwakes_branch=${{ fromJson(inputs.locations).xwakes_location }} \
            --build-arg with_gpu=${with_gpu} \
            -t $IMAGE .

  # Print out some stuff about the test environment
  image-sanity-checks:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: build-test-image
    env:
      image_id: ${{ needs.build-test-image.outputs.image_id }}
    steps:
      - name: CUDA/ROCm info
        if: ${{ env.with_gpu == 'true' }}
        run: docker run --rm --gpus all ${image_id} bash -c "nvidia-smi || rocm-smi"
      - name: OpenCL info
        if: ${{ env.with_gpu == 'true' }}
        run: docker run --rm --gpus all ${image_id} clinfo
      - name: Package paths
        run: docker run --rm ${{ env.with_gpu == 'true' && '--gpus all' || '' }} ${image_id} python3 /opt/xsuite/xtrack/examples/print_package_paths.py
      - name: List dependencies
        run: docker run --rm ${{ env.with_gpu == 'true' && '--gpus all' || '' }} ${image_id} pip freeze

  # Run the tests for each repo in parallel in a test container
  run-tests:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: [build-test-image, image-sanity-checks]
    timeout-minutes: 540
    strategy:
      fail-fast: false
      matrix:
        test-suite: ${{ fromJson(inputs.suites) }}

    steps:
    - name: Run pytest
      env:
        image_id: ${{ needs.build-test-image.outputs.image_id }}
        test_contexts: ${{ inputs.test_contexts }}
        pytest_options: ${{ inputs.pytest_options }}
      run: |
        mkdir -p reports/${{ matrix.test-suite }}
        exec docker run --rm \
          ${{ env.with_gpu == 'true' && '--gpus all' || '' }} \
          --env XOBJECTS_TEST_CONTEXTS="${test_contexts}" \
          --env PYTEST_ADDOPTS="${pytest_options}" \
          -v $PWD/reports/${{ matrix.test-suite }}:/opt/reports:Z \
          ${image_id} \
          /opt/run_tests.sh /opt/xsuite/${{ matrix.test-suite }}/tests

  wait:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: [build-test-image, run-tests]
    if: success() || failure()
    steps:
      - name: Wait
        run: sleep 60

  # Cleanup after the tests by removing the image and making sure there are
  # no unused images and stopped containers
  teardown:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: [build-test-image, wait]
    env:
      image_id: ${{ needs.build-test-image.outputs.image_id }}
    if: always()
    steps:
      - name: Clean up the image
        run: docker image rm -f ${image_id}
